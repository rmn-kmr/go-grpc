// Code generated by protoc-gen-go-grpc-client. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc-client v1.0.0
// - protoc             (unknown)
// source: proto/lsp.proto

package lsp

import (
	context "context"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

var headers = []string{
	"X-Request-Id",
}

type externalAPIClient struct {
	cc *aPIClient
}

func NewExternalAPIClient(cc grpc.ClientConnInterface) *externalAPIClient {
	return &externalAPIClient{
		cc: &aPIClient{
			cc,
		},
	}
}

func (c *externalAPIClient) LoanProviders(ctx context.Context, request *LoanProvidersRequest) (*LoanProvidersResponse, error) {
	md := metadata.Pairs()
	for _, header := range headers {
		if value := ctx.Value(header); value != nil {
			md.Append(header, value.(string))
		}
	}
	ctx = metadata.NewOutgoingContext(ctx, md)
	return c.cc.LoanProviders(ctx, request, grpc.Header(&md))
}

func (c *externalAPIClient) InitiateLoan(ctx context.Context, request *InitiateLoanRequest) (*InitiateLoanResponse, error) {
	md := metadata.Pairs()
	for _, header := range headers {
		if value := ctx.Value(header); value != nil {
			md.Append(header, value.(string))
		}
	}
	ctx = metadata.NewOutgoingContext(ctx, md)
	return c.cc.InitiateLoan(ctx, request, grpc.Header(&md))
}

func (c *externalAPIClient) CreateRepaymentSchedule(ctx context.Context, request *CreateRepaymentScheduleRequest) (*CreateRepaymentScheduleResponse, error) {
	md := metadata.Pairs()
	for _, header := range headers {
		if value := ctx.Value(header); value != nil {
			md.Append(header, value.(string))
		}
	}
	ctx = metadata.NewOutgoingContext(ctx, md)
	return c.cc.CreateRepaymentSchedule(ctx, request, grpc.Header(&md))
}

func (c *externalAPIClient) CreateLead(ctx context.Context, request *CreateLeadRequest) (*CreateLeadResponse, error) {
	md := metadata.Pairs()
	for _, header := range headers {
		if value := ctx.Value(header); value != nil {
			md.Append(header, value.(string))
		}
	}
	ctx = metadata.NewOutgoingContext(ctx, md)
	return c.cc.CreateLead(ctx, request, grpc.Header(&md))
}

func (c *externalAPIClient) UploadDocuments(ctx context.Context, request *UploadDocumentRequest) (*UploadDocumentResponse, error) {
	md := metadata.Pairs()
	for _, header := range headers {
		if value := ctx.Value(header); value != nil {
			md.Append(header, value.(string))
		}
	}
	ctx = metadata.NewOutgoingContext(ctx, md)
	return c.cc.UploadDocuments(ctx, request, grpc.Header(&md))
}

func (c *externalAPIClient) CreateLoan(ctx context.Context, request *CreateLoanRequest) (*CreateLoanResponse, error) {
	md := metadata.Pairs()
	for _, header := range headers {
		if value := ctx.Value(header); value != nil {
			md.Append(header, value.(string))
		}
	}
	ctx = metadata.NewOutgoingContext(ctx, md)
	return c.cc.CreateLoan(ctx, request, grpc.Header(&md))
}

func (c *externalAPIClient) BureauPull(ctx context.Context, request *BureauPullRequest) (*BureauPullResponse, error) {
	md := metadata.Pairs()
	for _, header := range headers {
		if value := ctx.Value(header); value != nil {
			md.Append(header, value.(string))
		}
	}
	ctx = metadata.NewOutgoingContext(ctx, md)
	return c.cc.BureauPull(ctx, request, grpc.Header(&md))
}

func (c *externalAPIClient) GetLoan(ctx context.Context, request *GetLoanRequest) (*GetLoanResponse, error) {
	md := metadata.Pairs()
	for _, header := range headers {
		if value := ctx.Value(header); value != nil {
			md.Append(header, value.(string))
		}
	}
	ctx = metadata.NewOutgoingContext(ctx, md)
	return c.cc.GetLoan(ctx, request, grpc.Header(&md))
}

func (c *externalAPIClient) SaveRepayment(ctx context.Context, request *SaveRepaymentRequest) (*SaveRepaymentResponse, error) {
	md := metadata.Pairs()
	for _, header := range headers {
		if value := ctx.Value(header); value != nil {
			md.Append(header, value.(string))
		}
	}
	ctx = metadata.NewOutgoingContext(ctx, md)
	return c.cc.SaveRepayment(ctx, request, grpc.Header(&md))
}

func (c *externalAPIClient) CheckLoanLimitStatus(ctx context.Context, request *LoanLimitStatusRequest) (*LoanLimitStatusResponse, error) {
	md := metadata.Pairs()
	for _, header := range headers {
		if value := ctx.Value(header); value != nil {
			md.Append(header, value.(string))
		}
	}
	ctx = metadata.NewOutgoingContext(ctx, md)
	return c.cc.CheckLoanLimitStatus(ctx, request, grpc.Header(&md))
}

func (c *externalAPIClient) DisburseLoan(ctx context.Context, request *DisbursalLoanRequest) (*DisbursalLoanResponse, error) {
	md := metadata.Pairs()
	for _, header := range headers {
		if value := ctx.Value(header); value != nil {
			md.Append(header, value.(string))
		}
	}
	ctx = metadata.NewOutgoingContext(ctx, md)
	return c.cc.DisburseLoan(ctx, request, grpc.Header(&md))
}

func (c *externalAPIClient) CheckLoanStatus(ctx context.Context, request *CheckLoanStatusRequest) (*CheckLoanStatusResponse, error) {
	md := metadata.Pairs()
	for _, header := range headers {
		if value := ctx.Value(header); value != nil {
			md.Append(header, value.(string))
		}
	}
	ctx = metadata.NewOutgoingContext(ctx, md)
	return c.cc.CheckLoanStatus(ctx, request, grpc.Header(&md))
}

func (c *externalAPIClient) PaymentUrl(ctx context.Context, request *PaymentUrlRequest) (*PaymentUrlResponse, error) {
	md := metadata.Pairs()
	for _, header := range headers {
		if value := ctx.Value(header); value != nil {
			md.Append(header, value.(string))
		}
	}
	ctx = metadata.NewOutgoingContext(ctx, md)
	return c.cc.PaymentUrl(ctx, request, grpc.Header(&md))
}

func (c *externalAPIClient) UpdateKycDetails(ctx context.Context, request *UploadKycDetailsRequest) (*UploadKycDetailsResponse, error) {
	md := metadata.Pairs()
	for _, header := range headers {
		if value := ctx.Value(header); value != nil {
			md.Append(header, value.(string))
		}
	}
	ctx = metadata.NewOutgoingContext(ctx, md)
	return c.cc.UpdateKycDetails(ctx, request, grpc.Header(&md))
}
