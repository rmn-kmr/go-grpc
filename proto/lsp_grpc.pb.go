// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/lsp.proto

package lsp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	API_LoanProviders_FullMethodName           = "/rmnkmr.lsp.v1.API/LoanProviders"
	API_InitiateLoan_FullMethodName            = "/rmnkmr.lsp.v1.API/InitiateLoan"
	API_CreateRepaymentSchedule_FullMethodName = "/rmnkmr.lsp.v1.API/CreateRepaymentSchedule"
	API_CreateLead_FullMethodName              = "/rmnkmr.lsp.v1.API/CreateLead"
	API_UploadDocuments_FullMethodName         = "/rmnkmr.lsp.v1.API/UploadDocuments"
	API_CreateLoan_FullMethodName              = "/rmnkmr.lsp.v1.API/CreateLoan"
	API_BureauPull_FullMethodName              = "/rmnkmr.lsp.v1.API/BureauPull"
	API_GetLoan_FullMethodName                 = "/rmnkmr.lsp.v1.API/GetLoan"
	API_SaveRepayment_FullMethodName           = "/rmnkmr.lsp.v1.API/SaveRepayment"
	API_CheckLoanLimitStatus_FullMethodName    = "/rmnkmr.lsp.v1.API/CheckLoanLimitStatus"
	API_DisburseLoan_FullMethodName            = "/rmnkmr.lsp.v1.API/DisburseLoan"
	API_CheckLoanStatus_FullMethodName         = "/rmnkmr.lsp.v1.API/CheckLoanStatus"
	API_PaymentUrl_FullMethodName              = "/rmnkmr.lsp.v1.API/PaymentUrl"
	API_UpdateKycDetails_FullMethodName        = "/rmnkmr.lsp.v1.API/UpdateKycDetails"
)

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIClient interface {
	LoanProviders(ctx context.Context, in *LoanProvidersRequest, opts ...grpc.CallOption) (*LoanProvidersResponse, error)
	InitiateLoan(ctx context.Context, in *InitiateLoanRequest, opts ...grpc.CallOption) (*InitiateLoanResponse, error)
	CreateRepaymentSchedule(ctx context.Context, in *CreateRepaymentScheduleRequest, opts ...grpc.CallOption) (*CreateRepaymentScheduleResponse, error)
	CreateLead(ctx context.Context, in *CreateLeadRequest, opts ...grpc.CallOption) (*CreateLeadResponse, error)
	UploadDocuments(ctx context.Context, in *UploadDocumentRequest, opts ...grpc.CallOption) (*UploadDocumentResponse, error)
	CreateLoan(ctx context.Context, in *CreateLoanRequest, opts ...grpc.CallOption) (*CreateLoanResponse, error)
	BureauPull(ctx context.Context, in *BureauPullRequest, opts ...grpc.CallOption) (*BureauPullResponse, error)
	GetLoan(ctx context.Context, in *GetLoanRequest, opts ...grpc.CallOption) (*GetLoanResponse, error)
	SaveRepayment(ctx context.Context, in *SaveRepaymentRequest, opts ...grpc.CallOption) (*SaveRepaymentResponse, error)
	CheckLoanLimitStatus(ctx context.Context, in *LoanLimitStatusRequest, opts ...grpc.CallOption) (*LoanLimitStatusResponse, error)
	DisburseLoan(ctx context.Context, in *DisbursalLoanRequest, opts ...grpc.CallOption) (*DisbursalLoanResponse, error)
	CheckLoanStatus(ctx context.Context, in *CheckLoanStatusRequest, opts ...grpc.CallOption) (*CheckLoanStatusResponse, error)
	PaymentUrl(ctx context.Context, in *PaymentUrlRequest, opts ...grpc.CallOption) (*PaymentUrlResponse, error)
	UpdateKycDetails(ctx context.Context, in *UploadKycDetailsRequest, opts ...grpc.CallOption) (*UploadKycDetailsResponse, error)
}

type aPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIClient(cc grpc.ClientConnInterface) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) LoanProviders(ctx context.Context, in *LoanProvidersRequest, opts ...grpc.CallOption) (*LoanProvidersResponse, error) {
	out := new(LoanProvidersResponse)
	err := c.cc.Invoke(ctx, API_LoanProviders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) InitiateLoan(ctx context.Context, in *InitiateLoanRequest, opts ...grpc.CallOption) (*InitiateLoanResponse, error) {
	out := new(InitiateLoanResponse)
	err := c.cc.Invoke(ctx, API_InitiateLoan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateRepaymentSchedule(ctx context.Context, in *CreateRepaymentScheduleRequest, opts ...grpc.CallOption) (*CreateRepaymentScheduleResponse, error) {
	out := new(CreateRepaymentScheduleResponse)
	err := c.cc.Invoke(ctx, API_CreateRepaymentSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateLead(ctx context.Context, in *CreateLeadRequest, opts ...grpc.CallOption) (*CreateLeadResponse, error) {
	out := new(CreateLeadResponse)
	err := c.cc.Invoke(ctx, API_CreateLead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) UploadDocuments(ctx context.Context, in *UploadDocumentRequest, opts ...grpc.CallOption) (*UploadDocumentResponse, error) {
	out := new(UploadDocumentResponse)
	err := c.cc.Invoke(ctx, API_UploadDocuments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateLoan(ctx context.Context, in *CreateLoanRequest, opts ...grpc.CallOption) (*CreateLoanResponse, error) {
	out := new(CreateLoanResponse)
	err := c.cc.Invoke(ctx, API_CreateLoan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) BureauPull(ctx context.Context, in *BureauPullRequest, opts ...grpc.CallOption) (*BureauPullResponse, error) {
	out := new(BureauPullResponse)
	err := c.cc.Invoke(ctx, API_BureauPull_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetLoan(ctx context.Context, in *GetLoanRequest, opts ...grpc.CallOption) (*GetLoanResponse, error) {
	out := new(GetLoanResponse)
	err := c.cc.Invoke(ctx, API_GetLoan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) SaveRepayment(ctx context.Context, in *SaveRepaymentRequest, opts ...grpc.CallOption) (*SaveRepaymentResponse, error) {
	out := new(SaveRepaymentResponse)
	err := c.cc.Invoke(ctx, API_SaveRepayment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CheckLoanLimitStatus(ctx context.Context, in *LoanLimitStatusRequest, opts ...grpc.CallOption) (*LoanLimitStatusResponse, error) {
	out := new(LoanLimitStatusResponse)
	err := c.cc.Invoke(ctx, API_CheckLoanLimitStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DisburseLoan(ctx context.Context, in *DisbursalLoanRequest, opts ...grpc.CallOption) (*DisbursalLoanResponse, error) {
	out := new(DisbursalLoanResponse)
	err := c.cc.Invoke(ctx, API_DisburseLoan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CheckLoanStatus(ctx context.Context, in *CheckLoanStatusRequest, opts ...grpc.CallOption) (*CheckLoanStatusResponse, error) {
	out := new(CheckLoanStatusResponse)
	err := c.cc.Invoke(ctx, API_CheckLoanStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) PaymentUrl(ctx context.Context, in *PaymentUrlRequest, opts ...grpc.CallOption) (*PaymentUrlResponse, error) {
	out := new(PaymentUrlResponse)
	err := c.cc.Invoke(ctx, API_PaymentUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) UpdateKycDetails(ctx context.Context, in *UploadKycDetailsRequest, opts ...grpc.CallOption) (*UploadKycDetailsResponse, error) {
	out := new(UploadKycDetailsResponse)
	err := c.cc.Invoke(ctx, API_UpdateKycDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServer is the server API for API service.
// All implementations should embed UnimplementedAPIServer
// for forward compatibility
type APIServer interface {
	LoanProviders(context.Context, *LoanProvidersRequest) (*LoanProvidersResponse, error)
	InitiateLoan(context.Context, *InitiateLoanRequest) (*InitiateLoanResponse, error)
	CreateRepaymentSchedule(context.Context, *CreateRepaymentScheduleRequest) (*CreateRepaymentScheduleResponse, error)
	CreateLead(context.Context, *CreateLeadRequest) (*CreateLeadResponse, error)
	UploadDocuments(context.Context, *UploadDocumentRequest) (*UploadDocumentResponse, error)
	CreateLoan(context.Context, *CreateLoanRequest) (*CreateLoanResponse, error)
	BureauPull(context.Context, *BureauPullRequest) (*BureauPullResponse, error)
	GetLoan(context.Context, *GetLoanRequest) (*GetLoanResponse, error)
	SaveRepayment(context.Context, *SaveRepaymentRequest) (*SaveRepaymentResponse, error)
	CheckLoanLimitStatus(context.Context, *LoanLimitStatusRequest) (*LoanLimitStatusResponse, error)
	DisburseLoan(context.Context, *DisbursalLoanRequest) (*DisbursalLoanResponse, error)
	CheckLoanStatus(context.Context, *CheckLoanStatusRequest) (*CheckLoanStatusResponse, error)
	PaymentUrl(context.Context, *PaymentUrlRequest) (*PaymentUrlResponse, error)
	UpdateKycDetails(context.Context, *UploadKycDetailsRequest) (*UploadKycDetailsResponse, error)
}

// UnimplementedAPIServer should be embedded to have forward compatible implementations.
type UnimplementedAPIServer struct {
}

func (UnimplementedAPIServer) LoanProviders(context.Context, *LoanProvidersRequest) (*LoanProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoanProviders not implemented")
}
func (UnimplementedAPIServer) InitiateLoan(context.Context, *InitiateLoanRequest) (*InitiateLoanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateLoan not implemented")
}
func (UnimplementedAPIServer) CreateRepaymentSchedule(context.Context, *CreateRepaymentScheduleRequest) (*CreateRepaymentScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRepaymentSchedule not implemented")
}
func (UnimplementedAPIServer) CreateLead(context.Context, *CreateLeadRequest) (*CreateLeadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLead not implemented")
}
func (UnimplementedAPIServer) UploadDocuments(context.Context, *UploadDocumentRequest) (*UploadDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadDocuments not implemented")
}
func (UnimplementedAPIServer) CreateLoan(context.Context, *CreateLoanRequest) (*CreateLoanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLoan not implemented")
}
func (UnimplementedAPIServer) BureauPull(context.Context, *BureauPullRequest) (*BureauPullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BureauPull not implemented")
}
func (UnimplementedAPIServer) GetLoan(context.Context, *GetLoanRequest) (*GetLoanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoan not implemented")
}
func (UnimplementedAPIServer) SaveRepayment(context.Context, *SaveRepaymentRequest) (*SaveRepaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveRepayment not implemented")
}
func (UnimplementedAPIServer) CheckLoanLimitStatus(context.Context, *LoanLimitStatusRequest) (*LoanLimitStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLoanLimitStatus not implemented")
}
func (UnimplementedAPIServer) DisburseLoan(context.Context, *DisbursalLoanRequest) (*DisbursalLoanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisburseLoan not implemented")
}
func (UnimplementedAPIServer) CheckLoanStatus(context.Context, *CheckLoanStatusRequest) (*CheckLoanStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLoanStatus not implemented")
}
func (UnimplementedAPIServer) PaymentUrl(context.Context, *PaymentUrlRequest) (*PaymentUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentUrl not implemented")
}
func (UnimplementedAPIServer) UpdateKycDetails(context.Context, *UploadKycDetailsRequest) (*UploadKycDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKycDetails not implemented")
}

// UnsafeAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServer will
// result in compilation errors.
type UnsafeAPIServer interface {
	mustEmbedUnimplementedAPIServer()
}

func RegisterAPIServer(s grpc.ServiceRegistrar, srv APIServer) {
	s.RegisterService(&API_ServiceDesc, srv)
}

func _API_LoanProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoanProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).LoanProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_LoanProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).LoanProviders(ctx, req.(*LoanProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_InitiateLoan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateLoanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).InitiateLoan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_InitiateLoan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).InitiateLoan(ctx, req.(*InitiateLoanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateRepaymentSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRepaymentScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateRepaymentSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_CreateRepaymentSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateRepaymentSchedule(ctx, req.(*CreateRepaymentScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateLead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLeadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateLead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_CreateLead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateLead(ctx, req.(*CreateLeadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_UploadDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).UploadDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_UploadDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).UploadDocuments(ctx, req.(*UploadDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateLoan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLoanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateLoan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_CreateLoan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateLoan(ctx, req.(*CreateLoanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_BureauPull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BureauPullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).BureauPull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_BureauPull_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).BureauPull(ctx, req.(*BureauPullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetLoan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetLoan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_GetLoan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetLoan(ctx, req.(*GetLoanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_SaveRepayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRepaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).SaveRepayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_SaveRepayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).SaveRepayment(ctx, req.(*SaveRepaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CheckLoanLimitStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoanLimitStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CheckLoanLimitStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_CheckLoanLimitStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CheckLoanLimitStatus(ctx, req.(*LoanLimitStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DisburseLoan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisbursalLoanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DisburseLoan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_DisburseLoan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DisburseLoan(ctx, req.(*DisbursalLoanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CheckLoanStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckLoanStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CheckLoanStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_CheckLoanStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CheckLoanStatus(ctx, req.(*CheckLoanStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_PaymentUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).PaymentUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_PaymentUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).PaymentUrl(ctx, req.(*PaymentUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_UpdateKycDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadKycDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).UpdateKycDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: API_UpdateKycDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).UpdateKycDetails(ctx, req.(*UploadKycDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// API_ServiceDesc is the grpc.ServiceDesc for API service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var API_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rmnkmr.lsp.v1.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoanProviders",
			Handler:    _API_LoanProviders_Handler,
		},
		{
			MethodName: "InitiateLoan",
			Handler:    _API_InitiateLoan_Handler,
		},
		{
			MethodName: "CreateRepaymentSchedule",
			Handler:    _API_CreateRepaymentSchedule_Handler,
		},
		{
			MethodName: "CreateLead",
			Handler:    _API_CreateLead_Handler,
		},
		{
			MethodName: "UploadDocuments",
			Handler:    _API_UploadDocuments_Handler,
		},
		{
			MethodName: "CreateLoan",
			Handler:    _API_CreateLoan_Handler,
		},
		{
			MethodName: "BureauPull",
			Handler:    _API_BureauPull_Handler,
		},
		{
			MethodName: "GetLoan",
			Handler:    _API_GetLoan_Handler,
		},
		{
			MethodName: "SaveRepayment",
			Handler:    _API_SaveRepayment_Handler,
		},
		{
			MethodName: "CheckLoanLimitStatus",
			Handler:    _API_CheckLoanLimitStatus_Handler,
		},
		{
			MethodName: "DisburseLoan",
			Handler:    _API_DisburseLoan_Handler,
		},
		{
			MethodName: "CheckLoanStatus",
			Handler:    _API_CheckLoanStatus_Handler,
		},
		{
			MethodName: "PaymentUrl",
			Handler:    _API_PaymentUrl_Handler,
		},
		{
			MethodName: "UpdateKycDetails",
			Handler:    _API_UpdateKycDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/lsp.proto",
}
