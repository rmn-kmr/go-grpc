package main

import (
	"fmt"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
)

const version = "1.0.0"

const (
	contextPackage  = protogen.GoImportPath("context")
	metadataPackage = protogen.GoImportPath("google.golang.org/grpc/metadata")
	grpcPackage     = protogen.GoImportPath("google.golang.org/grpc")
)

func main() {

	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			generateFile(gen, f)
		}
		return nil
	})
}

func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_client.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-grpc-client. DO NOT EDIT.")
	g.P("// versions:")
	g.P("// - protoc-gen-go-grpc-client v", version)
	g.P("// - protoc             ", protocVersion(gen))
	g.P("// source: ", file.Desc.Path())
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	// declare the headers array
	g.P("var headers = []string{")
	g.P(`"X-Request-Id",`)
	g.P(`}`)
	g.P()

	for _, service := range file.Services {
		genService(gen, file, g, service)
	}

	return g
}

func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}
	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}

func unexport(s string) string { return strings.ToLower(s[:1]) + s[1:] }

// create a service struct for each service defined in rpc service
func genService(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service) {
	serviceName := "external" + service.GoName + "Client"
	g.Annotate(serviceName, service.Location)
	g.P("type ", serviceName, " struct {")
	g.P("cc *", unexport(service.GoName), "Client")
	g.P("}")
	g.P()

	// create a initiation function for each service defined in rpc service
	genServiceInit(gen, file, g, service)

	for _, method := range service.Methods {
		genServiceMethod(gen, file, g, method)
	}
}

// create a initiation function for each service defined in rpc service
func genServiceInit(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service) {
	serviceName := "External" + service.GoName + "Client"
	grpcClientName := unexport(service.GoName) + "Client"
	g.P("func New", serviceName, "(cc ", grpcPackage.Ident("ClientConnInterface"), ") *", unexport(serviceName), " {")
	g.P("return &", unexport(serviceName), "{")
	g.P("cc: &", grpcClientName, "{")
	g.P("cc,")
	g.P("},")
	g.P("}")
	g.P("}")
	g.P()
}

// generate service method for each method defined in rpc service
func genServiceMethod(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, method *protogen.Method) {
	serviceName := "External" + method.Parent.GoName + "Client"
	g.P(method.Comments.Leading,
		"func (c *", unexport(serviceName), ") ", method.GoName, "(ctx ", contextPackage.Ident("Context"), ", request *", method.Input.GoIdent, ") (*", g.QualifiedGoIdent(method.Output.GoIdent), ", error) {")
	genMetadataPairs(g)
	g.P("return c.cc.", method.GoName, "(ctx, request, ", grpcPackage.Ident("Header"), "(&md))")
	g.P("}")
	g.P()
}

func genMetadataPairs(g *protogen.GeneratedFile) {
	// declare the md pairs
	g.P("md := ", metadataPackage.Ident("Pairs"), "()")
	// convert the value on the context to metadata
	g.P("for _, header := range headers {")
	g.P("if value := ctx.Value(header); value != nil {")
	g.P("md.Append(header, value.(string))")
	g.P("}")
	g.P("}")
	g.P("ctx = ", metadataPackage.Ident("NewOutgoingContext"), "(ctx, md)")
}
