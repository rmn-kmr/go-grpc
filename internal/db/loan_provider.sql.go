// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: loan_provider.sql

package db

import (
	"context"
)

const getLoanProviderByID = `-- name: GetLoanProviderByID :one
SELECT provider_id, provider, provider_type, provider_account_id, pre_expiration_token_refresh_mins, provider_name, api_key, api_secret, api_environment, api_base_url, labels, create_time, update_time, provider_config FROM loan_provider
WHERE provider_id = $1 LIMIT 1
`

func (q *Queries) GetLoanProviderByID(ctx context.Context, providerID string) (LoanProvider, error) {
	row := q.queryRow(ctx, q.getLoanProviderByIDStmt, getLoanProviderByID, providerID)
	var i LoanProvider
	err := row.Scan(
		&i.ProviderID,
		&i.Provider,
		&i.ProviderType,
		&i.ProviderAccountID,
		&i.PreExpirationTokenRefreshMins,
		&i.ProviderName,
		&i.ApiKey,
		&i.ApiSecret,
		&i.ApiEnvironment,
		&i.ApiBaseUrl,
		&i.Labels,
		&i.CreateTime,
		&i.UpdateTime,
		&i.ProviderConfig,
	)
	return i, err
}

const getLoanProviderBySlug = `-- name: GetLoanProviderBySlug :one
SELECT provider_id, provider, provider_type, provider_account_id, pre_expiration_token_refresh_mins, provider_name, api_key, api_secret, api_environment, api_base_url, labels, create_time, update_time, provider_config FROM loan_provider
WHERE provider = $1 LIMIT 1
`

func (q *Queries) GetLoanProviderBySlug(ctx context.Context, provider string) (LoanProvider, error) {
	row := q.queryRow(ctx, q.getLoanProviderBySlugStmt, getLoanProviderBySlug, provider)
	var i LoanProvider
	err := row.Scan(
		&i.ProviderID,
		&i.Provider,
		&i.ProviderType,
		&i.ProviderAccountID,
		&i.PreExpirationTokenRefreshMins,
		&i.ProviderName,
		&i.ApiKey,
		&i.ApiSecret,
		&i.ApiEnvironment,
		&i.ApiBaseUrl,
		&i.Labels,
		&i.CreateTime,
		&i.UpdateTime,
		&i.ProviderConfig,
	)
	return i, err
}

const getLoanProviders = `-- name: GetLoanProviders :many
SELECT provider_id, provider, provider_type, provider_account_id, pre_expiration_token_refresh_mins, provider_name, api_key, api_secret, api_environment, api_base_url, labels, create_time, update_time, provider_config FROM loan_provider
`

func (q *Queries) GetLoanProviders(ctx context.Context) ([]LoanProvider, error) {
	rows, err := q.query(ctx, q.getLoanProvidersStmt, getLoanProviders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LoanProvider
	for rows.Next() {
		var i LoanProvider
		if err := rows.Scan(
			&i.ProviderID,
			&i.Provider,
			&i.ProviderType,
			&i.ProviderAccountID,
			&i.PreExpirationTokenRefreshMins,
			&i.ProviderName,
			&i.ApiKey,
			&i.ApiSecret,
			&i.ApiEnvironment,
			&i.ApiBaseUrl,
			&i.Labels,
			&i.CreateTime,
			&i.UpdateTime,
			&i.ProviderConfig,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
